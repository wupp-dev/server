import{_ as e,c as a,o,a as s}from"./app.59268308.js";const g=JSON.parse('{"title":"Docker","description":"","frontmatter":{"title":"Docker","lang":"es-ES"},"headers":[{"level":2,"title":"TL;DR","slug":"tl-dr","link":"#tl-dr","children":[]},{"level":2,"title":"Instalaci\xF3n","slug":"instalacion","link":"#instalacion","children":[]},{"level":2,"title":"Docker Compose","slug":"docker-compose","link":"#docker-compose","children":[]},{"level":2,"title":"Usuario para Docker","slug":"usuario-para-docker","link":"#usuario-para-docker","children":[]},{"level":2,"title":"Archivos para Docker","slug":"archivos-para-docker","link":"#archivos-para-docker","children":[]},{"level":2,"title":"El docker-compose.yml","slug":"el-docker-compose-yml","link":"#el-docker-compose-yml","children":[]}],"relativePath":"equipo/docker.md","lastUpdated":1664039552000}'),n={name:"equipo/docker.md"},r=s(`<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-hidden="true">#</a></h1><p>Para gestionar y ejecutar todos los servicios web, utilizaremos el maravilloso Docker. Este hermoso software te permite (a trav\xE9s de un plugin llamado Docker Compose) ejecutar una serie de mini-vm desde la terminal en base a un archivo de configuraci\xF3n llamado <code>docker-compose.yml</code>.</p><p>Aqu\xED hay una gu\xEDa de c\xF3mo instalar y configurar todo, pero si te quedas con dudas o quieres ver algo m\xE1s a fondo, puedes visitar la <a href="https://docs.docker.com/" target="_blank" rel="noreferrer">documentaci\xF3n oficial de Docker</a>.</p><p><strong>Cositas generales</strong>: para seguir esta instalaci\xF3n tienes que ya haber <a href="./sistema-encriptado.html">configurado lo b\xE1sico del sistema operativo</a> (<code>apt</code> en realidad) y tener una terminal abierta. A parte, cualquier comando de <code>apt</code> se puede sustituir por su correspondiente <code>apt-get</code> (o <code>apt-cache</code>, pero que no vamos a usar realmente).</p><h2 id="tl-dr" tabindex="-1">TL;DR <a class="header-anchor" href="#tl-dr" aria-hidden="true">#</a></h2><p>Si vas con prisa o te da pereza leer, aunque no lo recomiendo para nada, copia y pega lo siguiente en tu terminal, dale a intro y que se haga la magia:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo apt remove docker docker-engine docker.io containerd runc</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo mkdir -p /etc/apt/keyrings</span></span>
<span class="line"><span style="color:#A6ACCD;">$ curl -fsSL https://download.docker.com/linux/debian/gpg </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">deb [arch=</span><span style="color:#89DDFF;">$(</span><span style="color:#C3E88D;">dpkg --print-architecture</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;"> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">$(</span><span style="color:#C3E88D;">lsb_release -cs</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;"> stable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sudo tee /etc/apt/sources.list.d/docker.list </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> /dev/null</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo apt update</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo adduser dockeruser</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo usermod -aG docker dockeruser</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo cp ./home/docker/ /home/docker/</span></span>
<span class="line"></span></code></pre></div><h2 id="instalacion" tabindex="-1">Instalaci\xF3n <a class="header-anchor" href="#instalacion" aria-hidden="true">#</a></h2><p>Gracias a estar en el inmejorable Debian, usaremos el magn\xEDfico comando <code>apt</code>. Nuestros queridos amigos de docker hace un tiempo cambiaron de los repositorios oficiales de apt a unos propios, y por tanto, <strong>si ya tienes alguna versi\xF3n de docker instalada</strong> (llamadas <code>docker</code>, <code>docker.io</code> o <code>docker-engine</code>) toca eliminar los antiguos paquetes ejecutando lo siguiente:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo apt remove docker docker-engine docker.io containerd runc</span></span>
<span class="line"></span></code></pre></div><p>Antes de empezar con la instalaci\xF3n de Docker, hay unos peque\xF1os requerimientos que instalar de apt: <code>ca-certificates</code>, <code>curl</code>, <code>gnupg</code>, <code>lsb-release</code>. As\xED que <strong>aseg\xFArate de tener esto instalado para seguir</strong>.</p><p>Ahora que tenemos esto instalado, vamos a descargar la clave GPG oficial de Docker y configurar el repositorio de APT. Ejecuta los siguientes comandos:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo mkdir -p /etc/apt/keyrings</span></span>
<span class="line"><span style="color:#A6ACCD;">$ curl -fsSL https://download.docker.com/linux/debian/gpg </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span></span>
<span class="line"><span style="color:#A6ACCD;">$ </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">deb [arch=</span><span style="color:#89DDFF;">$(</span><span style="color:#C3E88D;">dpkg --print-architecture</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;"> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian </span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">$(</span><span style="color:#C3E88D;">lsb_release -cs</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;"> stable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sudo tee /etc/apt/sources.list.d/docker.list </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> /dev/null</span></span>
<span class="line"></span></code></pre></div><p>Y ahora sin m\xE1s dilaci\xF3n instalemos docker:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo apt update</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo apt install docker-ce docker-ce-cli containerd.io</span></span>
<span class="line"></span></code></pre></div><p>Todo deber\xEDa de estar bien, pero si eres muy tiquismiqui puedes probar a ejecutar <code>sudo docker run hello-world</code> o mirar la documentaci\xF3n si algo va mal. No deber\xEDa de haber ning\xFAn problema con la compatibilidad de versiones, por lo menos por ahora, pero si llegase a haberlo pues \xAA.</p><h2 id="docker-compose" tabindex="-1">Docker Compose <a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a></h2><p>\xA1Sigamos instalando! La maravilla que Docker Compose es vamos a instalarla como un plugin del Docker que ya hemos instalado. Venga que esta es facilita, ejecuta esto y listo:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo apt install docker-compose-plugin</span></span>
<span class="line"></span></code></pre></div><p>De nuevo, si no conf\xEDas lo suficiente en <code>apt</code>, comprueba que todo est\xE1 bien ejecutando <code>docker compose version</code>.</p><h2 id="usuario-para-docker" tabindex="-1">Usuario para Docker <a class="header-anchor" href="#usuario-para-docker" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">RELATO</p><p>Cuando estaba en esto, que parec\xEDa muy simple, Debian decidi\xF3 que se iba a poner en mi contra y no funcionar, as\xED que ten\xE9is la historia de como colaps\xE9 en <a href="./../relatos/usuario-docker.html">un relato</a> (si veis que la gu\xEDa y los comandos han cambiado, es por lo ocurrido en ese relato).</p></div><p>Para ejecutar el inmejorable Docker vamos a crear un diferente usuario para ejecutar Docker, as\xED mejoramos ligeramente la seguridad. Para que un usuario pueda ejecutar Docker sin tener que hacer <code>sudo</code> y ejecutarlo como <em>root</em>, hay que a\xF1adirlo al grupo <em>docker</em>. Desde t\xFA usuario de administraci\xF3n con <code>sudo</code> a\xFAn instalado, vamos a ello entonces:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo adduser dockeruser </span><span style="color:#676E95;"># Creaci\xF3n del usuario y su home en /home/dockeruser</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo passwd dockeruser </span><span style="color:#676E95;"># Tenemos que asignarle una contrase\xF1a (recomendaci\xF3n: que sea larga)</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo usermod -aG docker dockeruser </span><span style="color:#676E95;"># A\xF1adir el usuario al grupo</span></span>
<span class="line"></span></code></pre></div><h2 id="archivos-para-docker" tabindex="-1">Archivos para Docker <a class="header-anchor" href="#archivos-para-docker" aria-hidden="true">#</a></h2><p>Antes de cambiar al usuario <code>dockeruser</code>, a\xFAn con el usuario de administrador copiaremos todos los contenidos de este repositorio <em>&lt;repo_root&gt;/home/dockeruser</em> a la carpeta de <em>/home/dockeruser</em> en nuestro sistema (<strong>importante hacerlo como el usuario administrador, con el usuario <code>dockeruser</code> no nos dejar\xE1</strong>). Aqu\xED est\xE1n los archivos de configuraci\xF3n de todos los servicios y el famoso <code>docker-compose.yml</code>. As\xED que, <strong>encontr\xE1ndonos en la carpeta del clon del repositorio del server</strong>, ejecutamos:</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo cp ./home/dockeruser/ /home/dockeruser/</span></span>
<span class="line"></span></code></pre></div><p>Donde se asume que estamos la ra\xEDz del repositorio.</p><h2 id="el-docker-compose-yml" tabindex="-1">El <code>docker-compose.yml</code> <a class="header-anchor" href="#el-docker-compose-yml" aria-hidden="true">#</a></h2><p>Por fin llegamos al famoso archivo. Este archivo incluye toda la configuraci\xF3n de los servicios a ejecutar con Docker y nos permite c\xF3modamente iniciar todos. En la p\xE1gina de cada servicio se puede encontrar un extracto del contenido del <code>docker-compose.yml</code> para ese servicio concreto. Veamos la estructura de este archivo:</p><ul><li><p><strong><code>version</code>:</strong> algo importar\xE1 intuyo, pero no creo que mucho as\xED que est\xE1 la 2 por que lo deb\xED de ver por ah\xED con el primer servicio que puse y ah\xED se ha quedado.</p></li><li><p><strong><code>volumes</code>:</strong> una forma integrada en docker para guardar archivos sin importar mucho donde se guardan estos, pero de forma que el programa pueda perdurar datos en forma de archivo, lo cual usaremos para cach\xE9 o archivos que no sean de configuraci\xF3n o podramos requerir frecuentemente.</p></li><li><p><strong><code>services</code>:</strong> esto es lo importante, aqu\xED declaramos todos los contenedores que se han de crear, en donde se especifica la imagen (el contenedor/mini-vm a utilizar), los puertos que se exponen (mapeando <code>&lt;EQUIPO&gt;:&lt;CONTENEDOR&gt;</code>), variables de entorno (environment vars para quien sepa), la pol\xEDtica de reinicio (ser\xE1 siempre <em>always</em> o <em>unless-stopped</em>) y los vol\xFAmenes y mapeo de archivos y carpetas correspondientes.</p></li></ul><p>Hay otro par de ajustes para este archivo (por ejemplo <code>networks</code>), pero no son relevantes para esta instalaci\xF3n y no se usan en ella, por tanto si quieres m\xE1s informaci\xF3n de estos lee la <a href="https://docs.docker.com/compose/" target="_blank" rel="noreferrer">documentaci\xF3n oficial de Docker Compose</a></p><p>Lo dicho, seg\xFAn vayamos viendo los diferentes servicios se ir\xE1n mostrando los extractos del archivo para el correspondiente servicio para que as\xED pod\xE1is c\xF3modamente seleccionar que servicios quer\xE9is. El archivo tambi\xE9n se encuentra ampliamente documentado, por tanto con leer este documento deber\xEDa de ser suficiente para entenderlo.</p>`,33),c=[r];function l(p,t,d,i,u,m){return o(),a("div",null,c)}const y=e(n,[["render",l]]);export{g as __pageData,y as default};
