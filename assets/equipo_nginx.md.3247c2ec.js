import{_ as a,c as s,o as e,a as n}from"./app.344e3547.js";const y=JSON.parse('{"title":"Nginx como servidor web","description":"","frontmatter":{"title":"Nginx como servidor web","lang":"es-ES"},"headers":[{"level":2,"title":"Instalaci\xF3n y puesta en marcha","slug":"instalacion-y-puesta-en-marcha","link":"#instalacion-y-puesta-en-marcha","children":[]},{"level":2,"title":"Habilitando (y forzando) HTTPS","slug":"habilitando-y-forzando-https","link":"#habilitando-y-forzando-https","children":[]},{"level":2,"title":"Otras mejoras de seguridad","slug":"otras-mejoras-de-seguridad","link":"#otras-mejoras-de-seguridad","children":[]}],"relativePath":"equipo/nginx.md","lastUpdated":1663514252000}'),o={name:"equipo/nginx.md"},r=n(`<h1 id="nginx-como-servidor-web" tabindex="-1">Nginx como servidor web <a class="header-anchor" href="#nginx-como-servidor-web" aria-hidden="true">#</a></h1><p>Ya nos hemos encargado de poder acceder al servidor remotamente, pero eso es solo para nosotros, queda la parte m\xE1s importante, el poder ofrecer alg\xFAn tipo de servicio <em>(como puede ser una p\xE1gina web)</em>.</p><p>Para ello, necesitamos un servidor web, que se encargar\xE1 de gestionar las conexiones entrantes.</p><h2 id="instalacion-y-puesta-en-marcha" tabindex="-1">Instalaci\xF3n y puesta en marcha <a class="header-anchor" href="#instalacion-y-puesta-en-marcha" aria-hidden="true">#</a></h2><p>Para asegurarnos de tener la \xFAltima versi\xF3n siempre instalada, utilizaremos los repositorios de Nginx en vez de los del sistema operativo. Para a\xF1adirlos, podemos seguir los pasos de <a href="https://nginx.org/en/linux_packages.html#Debian" target="_blank" rel="noreferrer">su web</a>, que para Debian son:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo apt install curl gnupg2 ca-certificates lsb-release debian-archive-keyring</span></span>
<span class="line"><span style="color:#A6ACCD;">$ curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null</span></span>
<span class="line"><span style="color:#A6ACCD;">$ gpg --dry-run --quiet --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Con este \xFAltimo comando verificamos que la clave es la correcta, deber\xEDa mostrarse lo siguiente:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">pub   rsa2048 2011-08-19 [SC] [expires: 2024-06-14]</span></span>
<span class="line"><span style="color:#A6ACCD;">      573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62</span></span>
<span class="line"><span style="color:#A6ACCD;">uid                      nginx signing key &lt;signing-key@nginx.com&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Nosotros hemos escogido usar los paquetes <strong>mainline</strong> en vez de los <strong>stable</strong>, la diferencia es que los primeros contienen las \xFAltimas novedades aunque pueden ser menos estables por tener caracter\xEDsticas experimentales. Para a\xF1adir el repositorio mainline, utilizamos el siguiente comando:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">$ echo &quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\</span></span>
<span class="line"><span style="color:#A6ACCD;">http://nginx.org/packages/mainline/debian \`lsb_release -cs\` nginx&quot; \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    | sudo tee /etc/apt/sources.list.d/nginx.list</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Y ya ha llegado el momento de instalar Nginx:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo apt update</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo apt install nginx</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Una vez instalado, podemos iniciarlo y verificar que est\xE1 funcionando correctamente:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo systemctl start nginx</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo systemctl status nginx</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Sin embargo, queda un \xFAltimo paso, permitir los puertos <code>80</code> y <code>443</code> tanto en el rotuer como en el firewall, para el firewall escribimos:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo ufw allow 80</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo ufw allow 443</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Estos son los puertos de HTTP y HTTPS respectivamente.</p><p>Vamos a hacer retocar un poco la configuraci\xF3n para las partes venideras de la gu\xEDa. La configuraci\xF3n de Nginx se estructura en bloques. Concretamente la parte que tocaremos son los bloques <code>server</code>, que ser\xE1n la configuraci\xF3n de cada uno de nuestros subdominios. Estos archvios de configuraci\xF3n se guardan en <code>/etc/nginx/conf.d/</code> y, por defecto, solo habr\xE1 un archivo llamado <code>default.conf</code>, vamos a cambiarle el nombre a <code>servermamadisimo.xyz</code>, ya que tendr\xE1 el bloque encargado de gestionar las conexiones con esa URL.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">$ mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/servermamadisimo.xyz.conf</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Editamos el archivo y buscamos una l\xEDnea que empiece por <code>server_name</code>:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">server_name servermamadisimo.xyz www.servermamadisimo.xyz;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Ahora verificamos que el archivo modificado verifique la sint\xE1xis y reiniciamos el servicio de Nginx:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo nginx -t</span></span>
<span class="line"><span style="color:#A6ACCD;">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span></span>
<span class="line"><span style="color:#A6ACCD;">nginx: configuration file /etc/nginx/nginx.conf test is successful</span></span>
<span class="line"><span style="color:#A6ACCD;">$ sudo systemctl reload nginx</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="habilitando-y-forzando-https" tabindex="-1">Habilitando <em>(y forzando)</em> HTTPS <a class="header-anchor" href="#habilitando-y-forzando-https" aria-hidden="true">#</a></h2><p>Ahora mismo podemos poner en el navegador <a href="http://servermamadisimo.xyz/" target="_blank" rel="noreferrer">servermamadisimo.xyz</a>, pero la conexi\xF3n no es segura \u{1F626}</p><p>Eso es inadmisible, as\xED que vamos a forzar a que todas las conexiones HTTP se redirijan a HTTPS. Hemos seguido <a href="https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04-es" target="_blank" rel="noreferrer">este tutorial</a>.</p><p>Vamos a utilizar Certbot, un software para gestionar los certificados de Let&#39;s Encrypt, que son <a href="https://es.wikipedia.org/wiki/Autoridad_de_certificaci%C3%B3n" target="_blank" rel="noreferrer">certificados de autoridad</a> gratuitos.</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo apt install certbot python3-certbot-nginx</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Generamos el certificado para nuestro dominio:</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">$ sudo certbot --nginx -d servermamadisimo.xyz -d www.servermamadisimo.xyz</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Y ya est\xE1, certbot se encarga de modificar la configuraci\xF3n del archivo <code>/etc/nginx/conf.d/servermamadisimo.xyz.conf</code> para forzar el uso de HTTPS y para renovar autom\xE1ticamente los certificados cuando vayan a expirar.</p><h2 id="otras-mejoras-de-seguridad" tabindex="-1">Otras mejoras de seguridad <a class="header-anchor" href="#otras-mejoras-de-seguridad" aria-hidden="true">#</a></h2><p>--- POR HACER ---</p>`,33),i=[r];function l(t,p,c,d,u,g){return e(),s("div",null,i)}const h=a(o,[["render",l]]);export{y as __pageData,h as default};
